user  nginx;
worker_processes  auto;
master_process on;
worker_rlimit_nofile 200000;
worker_rlimit_core 500M;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  16384;
  multi_accept on;
  use epoll;
  accept_mutex on;
}


http {
  proxy_redirect              off;
  server_tokens off;
  types_hash_max_size 2048;
  ## Insert Headers
  proxy_set_header            Host            $http_host;
  proxy_set_header            X-Real-IP       $remote_addr;
  proxy_set_header            X-Forwarded-For  $proxy_add_x_forwarded_for;
  proxy_set_header            X-Forwarded-Proto https;
  ## General normalization/prodection
  client_body_buffer_size     128k;
  client_header_buffer_size   64k;
  proxy_buffer_size           16k;
  proxy_buffers               64  32k;
  proxy_busy_buffers_size     64k;

  reset_timedout_connection on;
  ssl_session_cache builtin shared:SSL:20m;
  ssl_session_timeout 10m;
  ssl_session_tickets off;

  sendfile on;
  tcp_nopush on;
  keepalive_timeout 15;

  # Logging
  access_log off;
  log_format perflog "[$time_local] $bytes_sent bytes in $request_time s from $upstream_addr | Connect:$upstream_connect_time s Header:$upstream_header_time s Response:$upstream_response_time ms |Â $remote_addr $request $status";
 
  # Set to true if first to last byte is longer then 500 ms 
  map $request_time $dolog {
    default 0;
    ~*0\.[5-9]|[1-9]\. 1;
  }

  # Set to true if response code is 5xx or 444
  map $status $dolog {
    default 0;
    ~*5\d\d|444 1;
  }

  # http-Includes
  include {{ nginx_conf_d }}/*.mon;
  include {{ nginx_conf_d }}/*.sfarm;
  include {{ nginx_conf_d }}/*.conf;


  server {
    listen {{ ansible_eth0.ipv4.address }}:80;
    listen 127.0.0.1:80;

    location /api {
      upstream_conf;
      allow 127.0.0.1;
{% for addr in api_acl %}
      allow {{ addr }};
{% endfor %}
      deny all;
    }

    location /status {
        status;
        allow 127.0.0.1;
{% for addr in monitor_acl %}
        allow {{ addr }};
{% endfor %}
        deny all;
    }

    location = /status.html {
      root /usr/share/nginx/html;
    }
  }
}

stream {
  # stream-Includes
  include /etc/nginx/conf.d/*.stream;
  include /etc/nginx/conf.d/*.tcp;
}
