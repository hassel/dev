{% for protocol in vips[item.key].proto %}
{% if protocol == 'https' %}
server {
{% for addr in vips[item.key].listen %}
  listen {{ addr }}:443 ssl http2 deferred;
{% endfor %}
  server_name {{ vips[item.key].server_name }};
  ssl_certificate {{ ssl_base }}/{{ vips[item.key].ssl_crt }};
  ssl_certificate_key {{ ssl_base }}/{{ vips[item.key].ssl_key }};
  ssl_dhparam {{ nginx_base }}/dhparams.pem;
  ssl_ciphers {{ ciphers }};
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_tickets off;
{% if vips[item.key].ssl_staple is defined %}
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate {{ ssl_base }}/{{ vips[item.key].ssl_staple }};
  resolver 172.29.248.10;
{% endif %}
  client_body_timeout 10s;
  client_header_timeout 10s;


  access_log /var/log/nginx/{{ vips[item.key].server_name|replace(".","-") }}.log perflog if=$dolog;

  include {{ nginx_conf_d }}/header_https.inc;
  location / {
    deny all;
    return 444;
  }
{% for key, value in vips[item.key].locations|dictsort %}
{% if value.context is not string %}
{% for context in value.context %}
  location {{ context }} {
  proxy_pass http://{{ value.backend }};
{% if loop.first %}
{% if vips[item.key].probe is defined %}
  health_check interval=2s fails=2 passes=5 uri={{ vips[item.key].probe_uri }} match={{ vips[item.key].probe }};
{% endif %}
{% endif %}
  }
{% endfor %}
{% elif value.context is string %}
  location {{ value.context }} {
  proxy_pass http://{{ value.backend }};
{% if vips[item.key].probe is defined %}
  health_check interval=2s fails=2 passes=5 uri={{ vips[item.key].probe_uri }} match={{ vips[item.key].probe }};
{% endif %}
  }
{% endif %}
{% endfor %}
  status_zone {{ vips[item.key].server_name|replace(".","-") }}-{{ protocol }};
{% elif protocol == 'http' %}
server {
{% for addr in vips[item.key].listen %}
  listen {{ addr }}:80 deferred;
{% endfor %}
  server_name {{ vips[item.key].server_name }};

  client_body_timeout 10s;
  client_header_timeout 10s;

  access_log /var/log/nginx/{{ vips[item.key].server_name|replace(".","-") }}.log perflog if=$dolog;

  include {{ nginx_conf_d }}/header_http.inc;
  location / {
    deny all;
    return 444;
  }
{% for key, value in vips[item.key].locations|dictsort %}
{% if value.context is not string %}
{% for context in value.context %}
  location {{ context }} {
  proxy_pass http://{{ value.backend }};
{% if loop.first %}
{% if vips[item.key].probe is defined %}
  health_check interval=2s fails=2 passes=5 uri={{ vips[item.key].probe_uri }} match={{ vips[item.key].probe }};
{% endif %}
{% endif %}
  }
{% endfor %}
{% elif value.context is string %}
  location {{ value.context }} {
  proxy_pass http://{{ value.backend }};
  }
{% endif %}
{% endfor %}
  status_zone {{ vips[item.key].server_name|replace(".","-") }}-{{ protocol }};
{% elif protocol == 'tcp' %}
server {
{% for addr in vips[item.key].listen %}
  listen {{ addr }};
{% endfor %}
  proxy_connect_timeout 10s;
  proxy_timeout 10m;
  proxy_pass {{ vips[item.key].backend }};
  health_check;
  health_check_timeout 5s;
  status_zone {{ vips[item.key].server_name|replace(".","-") }}-{{ protocol }};
{% elif protocol == 'wss' %}
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }
server {
{% for addr in vips[item.key].listen %}
  listen {{ addr }}:443 ssl http2 deferred;
{% endfor %}
  server_name {{ vips[item.key].server_name }};
  ssl_certificate {{ ssl_base }}/{{ vips[item.key].ssl_crt }};
  ssl_certificate_key {{ ssl_base }}/{{ vips[item.key].ssl_key }};
  ssl_dhparam {{ nginx_base }}/dhparams.pem;
  ssl_ciphers {{ ciphers }};
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_tickets off;
{% if vips[item.key].ssl_staple is defined %}
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate {{ ssl_base }}/{{ vips[item.key].ssl_staple }};
{% endif %}
  proxy_buffers 8 32k;
  proxy_buffer_size 64k;
  proxy_connect_timeout       120;
  proxy_read_timeout          301;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";

  access_log /var/log/nginx/{{ vips[item.key].server_name|replace(".","-") }}.log perflog if=$dolog;

  include {{ nginx_conf_d }}/header_https.inc;

  location / {
    proxy_pass http://{{ vips[item.key].backend }};
  }
  status_zone {{ vips[item.key].server_name|replace(".","-") }}-{{ protocol }};
{% endif %}
}
{% endfor %}
