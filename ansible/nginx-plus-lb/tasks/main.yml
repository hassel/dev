---
- name: sysctl settings
  sysctl: name={{ item.key }} value="{{ item.value }}" reload=yes
  with_dict: sysctl
  ignore_errors: true
  tags:
    - sysctl

- name: install
  apt: name=nginx-plus=1.9.9-3~precise state=present update_cache=yes
  tags:
    - nginx
    - nginx-install
  ignore_errors: true

- name: remove default config
  file: dest={{ nginx_conf_d }}/{{ item }} state=absent
  with_items: "{{ default_files }}"
  tags:
    - nginx
    - nginx-install
  register: default_conf

- name: check for dhparam-file
  stat: path={{ nginx_base }}/dhparams.pem
  register: dhparam
  ignore_errors: true
  tags:
    - nginx
    - nginx-install
    - dhparams

- name: generate dhparam
  command: openssl dhparam -out {{ nginx_base }}/dhparams.pem 4096 creates={{ nginx_base }}/dhparams.pem
#  when: dhparam.stat.exists == False
  async: 2640
  poll: 0
  ignore_errors: true
  tags:
    - nginx-install
    - dhparams
    - nginx

- name: push header files for includes
  copy: src={{ item }} dest={{ nginx_conf_d }}/{{ item }}
  with_items: "{{ header_files }}"
  tags:
    - nginx
    - nginx-install

- name: generate nginx core config
  template: src=nginx.conf.j2 dest={{ nginx_base }}/nginx.conf
  register: nginx_core
  tags:
    - nginx
    - nginx-config

- name: generate nginx VIP config
  template: src=vip.conf.j2 dest={{ nginx_conf_d }}/{{ item.key }}.{{ vips[item.key].prefix }}
  with_dict: vips
  register: nginx_frontend
  tags:
    - nginx
    - nginx-frontend
    - nginx-config

- name: generate monitoring config
  template: src=monitoring.j2 dest={{ nginx_conf_d }}/{{ item.key }}.mon
  with_dict: probes
  when: probes is defined
  tags:
    - nginx
    - nginx-monitor
    - nginx-config

- name: generate nginx backend config
  template: src=upstream.sfarm.j2 dest={{ nginx_conf_d }}/{{ item.key }}.{{ upstreams[item.key].prefix }}
  with_dict: upstreams
  register: nginx_upstream
  tags:
    - nginx
    - nginx-backend
    - nginx-config

- name: check config syntax
  command: /usr/sbin/nginx -c {{ nginx_base }}/nginx.conf -t
  register: nginx_config_check
  failed_when: nginx_config_check.rc != 0
  tags:
    - nginx
    - nginx-backend
    - nginx-monitor
    - nginx-frontend
    - nginx-config
  ignore_errors: true

- name: reconfigure and notify reload
  command: /usr/sbin/nginx -c {{ nginx_base }}/nginx.conf -t
  register: nginx_config_apply
  failed_when: nginx_config_apply.rc != 0
  notify: reload nginx
  when: nginx_config_check|success and (nginx_frontend|changed or nginx_upstream|changed or nginx_core|changed)
  tags:
    - nginx
    - nginx-backend
    - nginx-monitor
    - nginx-frontend
    - nginx-config
  ignore_errors: true

- name: ensure nginx is running
  service: name=nginx state=running enabled=yes
  tags:
    - nginx-config
    - nginx-install

- name: update motd
  template: src=motd.j2 dest=/etc/motd
  tags:
    - nginx
    - nginx-backend
    - nginx-monitor
    - nginx-frontend
    - nginx-config

- hipchat: 
    token={{ hipchat_token }} 
    room='{{ hipchat_room }}'
    api={{ hipchat_api }} from="nginx-{{ site }}" 
    msg='{{ ansible_env.SUDO_USER }} tested NGINX configuration on {{ inventory_hostname }} and its broken {{ nginx_config_check.stderr }}'  
    validate_certs=no color=red
  when: nginx_config_check|failed
  ignore_errors: true
  tags:
    - nginx
    - nginx-backend
    - nginx-monitor
    - nginx-frontend
    - nginx-config

- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='{{ ansible_env.SUDO_USER }} tested NGINX configuration on {{ inventory_hostname }} and its ok'  validate_certs=no color=green
  when: nginx_config_check|success
  ignore_errors: true
  tags:
    - nginx
    - nginx-backend
    - nginx-monitor
    - nginx-frontend
    - nginx-config


- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='{{ ansible_env.SUDO_USER }} deployed new NGINX-Backend configuration on {{ inventory_hostname }}'  validate_certs=no color=green
  when: (nginx_upstream|changed and nginx_config_check|success and nginx_config_apply|success)
  ignore_errors: true
  tags:
    - nginx
    - nginx-backend
    - nginx-config

- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='{{ ansible_env.SUDO_USER }} deployed broken NGINX-Backend configuration on {{ inventory_hostname }}'  validate_certs=no color=red
  when: (nginx_upstream|changed and nginx_config_check|failed)
  ignore_errors: true
  tags:
    - nginx
    - nginx-backend
    - nginx-config

- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='{{ ansible_env.SUDO_USER }} deployed new NGINX-Frontend configuration on {{ inventory_hostname }}'   validate_certs=no color=green
  when: (nginx_frontend|changed and nginx_config_check|success)
  ignore_errors: true
  tags:
    - nginx
    - nginx-frontend
    - nginx-config

- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='{{ ansible_env.SUDO_USER }} deployed broken NGINX-Frontend configuration on {{ inventory_hostname }} poff {{ nginx_config_check.stderr }}'  validate_certs=no color=red
  when: (nginx_frontend|changed and nginx_config_check|failed)
  ignore_errors: true
  tags:
    - nginx
    - nginx-frontend
    - nginx-config


- uri:
    url: http://127.0.0.1/status/connections/active
  tags: status
  register: nginx_test
  sudo: no

- hipchat: token={{ hipchat_token }} room='{{ hipchat_room }}' api={{ hipchat_api }} from="nginx-{{ site }}" msg='I ({{ inventory_hostname }}) have {{ nginx_test.json }} connections active'  validate_certs=no color=green
  tags: status
  when: nginx_test.json is defined
  ignore_errors: true
  sudo: no

 



